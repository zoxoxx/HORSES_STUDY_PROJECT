// <auto-generated />
using System;
using HORSES.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HORSES.Migrations
{
    [DbContext(typeof(HorseCompetitionsContext))]
    [Migration("20250212195209_NewFieldToParticipant")]
    partial class NewFieldToParticipant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HORSES.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.CheckIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .HasColumnType("character varying")
                        .HasColumnName("age");

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer")
                        .HasColumnName("distance");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("PlaceBirthIdCollection")
                        .HasColumnType("character varying")
                        .HasColumnName("place_birth_id_collection");

                    b.Property<decimal?>("PrizeFund")
                        .HasColumnType("numeric")
                        .HasColumnName("prize_fund");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number");

                    b.Property<TimeOnly?>("TimeStart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_start");

                    b.Property<int?>("TypeCheckInId")
                        .HasColumnType("integer")
                        .HasColumnName("type_check_in_id");

                    b.Property<string>("TypeHorseIdCollection")
                        .HasColumnType("character varying")
                        .HasColumnName("type_horse_id_collection");

                    b.HasKey("Id")
                        .HasName("check_in_pkey");

                    b.HasIndex("TypeCheckInId");

                    b.ToTable("check_in", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.CheckInResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CheckInId")
                        .HasColumnType("integer")
                        .HasColumnName("check_in_id");

                    b.Property<string>("Indicator")
                        .HasColumnType("character varying")
                        .HasColumnName("indicator");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer")
                        .HasColumnName("participant_id");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric")
                        .HasColumnName("result");

                    b.Property<TimeOnly?>("TimeEnd")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_end");

                    b.HasKey("Id")
                        .HasName("check_in_result_pkey");

                    b.HasIndex("CheckInId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("check_in_result", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("city_pkey");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.ClothesSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HelmetColor")
                        .HasColumnType("character varying")
                        .HasColumnName("helmet_color");

                    b.Property<string>("HelmetForm")
                        .HasColumnType("character varying")
                        .HasColumnName("helmet_form");

                    b.HasKey("Id")
                        .HasName("clothes_set_pkey");

                    b.ToTable("clothes_set", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("company_pkey");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<TimeOnly?>("TimeStart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_start");

                    b.HasKey("Id")
                        .HasName("competition_pkey");

                    b.ToTable("competition", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.CompetitionAndCheckIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CheckInId")
                        .HasColumnType("integer")
                        .HasColumnName("check_in_id");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer")
                        .HasColumnName("participant_id");

                    b.Property<int?>("TrackId")
                        .HasColumnType("integer")
                        .HasColumnName("track_id");

                    b.HasKey("Id")
                        .HasName("competition_and_check_in_pkey");

                    b.HasIndex("CheckInId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TrackId");

                    b.ToTable("competition_and_check_in", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DonationSumm")
                        .HasColumnType("integer")
                        .HasColumnName("donation_summ");

                    b.Property<int?>("HorseId")
                        .HasColumnType("integer")
                        .HasColumnName("horse_id");

                    b.HasKey("Id")
                        .HasName("donation_pkey");

                    b.HasIndex("HorseId");

                    b.ToTable("donation", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("gender_pkey");

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("gender_id");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhyoTrener")
                        .HasColumnType("character varying")
                        .HasColumnName("phyo_trener");

                    b.Property<int?>("PlaceBirthId")
                        .HasColumnType("integer")
                        .HasColumnName("place_birth_id");

                    b.Property<int?>("TypId")
                        .HasColumnType("integer")
                        .HasColumnName("typ_id");

                    b.HasKey("Id")
                        .HasName("horse_pkey");

                    b.HasIndex("GenderId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlaceBirthId");

                    b.HasIndex("TypId");

                    b.ToTable("horse", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Phyo")
                        .HasColumnType("character varying")
                        .HasColumnName("phyo");

                    b.HasKey("Id")
                        .HasName("owner_pkey");

                    b.HasIndex("CompanyId");

                    b.ToTable("owner", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClothesSetId")
                        .HasColumnType("integer")
                        .HasColumnName("clothes_set_id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Disqualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("disqualification");

                    b.Property<int?>("HorseId")
                        .HasColumnType("integer")
                        .HasColumnName("horse_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("participant_pkey");

                    b.HasIndex("ClothesSetId");

                    b.HasIndex("HorseId");

                    b.HasIndex("UserId");

                    b.ToTable("participant", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.PlaceBirth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("place_birth_pkey");

                    b.ToTable("place_birth", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("track_pkey");

                    b.ToTable("track", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.TypHorse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("typ_horse_pkey");

                    b.ToTable("typ_horse", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.TypeCheckIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("type_check_in_pkey");

                    b.ToTable("type_check_in", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.UserI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<Guid?>("DistinctCode")
                        .HasColumnType("uuid")
                        .HasColumnName("distinct_code");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("gender_id");

                    b.Property<string>("Login")
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Phyo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("phyo");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("user_is_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_is", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.Violation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("integer")
                        .HasColumnName("participant_id");

                    b.Property<string>("Violations")
                        .HasColumnType("character varying")
                        .HasColumnName("violations");

                    b.HasKey("Id")
                        .HasName("violation_pkey");

                    b.HasIndex("ParticipantId");

                    b.ToTable("violation", (string)null);
                });

            modelBuilder.Entity("HORSES.Models.CheckIn", b =>
                {
                    b.HasOne("HORSES.Models.TypeCheckIn", "TypeCheckIn")
                        .WithMany("CheckIns")
                        .HasForeignKey("TypeCheckInId")
                        .HasConstraintName("check_in_type_check_in_id_fkey");

                    b.Navigation("TypeCheckIn");
                });

            modelBuilder.Entity("HORSES.Models.CheckInResult", b =>
                {
                    b.HasOne("HORSES.Models.CheckIn", "CheckIn")
                        .WithMany("CheckInResults")
                        .HasForeignKey("CheckInId")
                        .HasConstraintName("check_in_result_check_in_id_fkey");

                    b.HasOne("HORSES.Models.Participant", "Participant")
                        .WithMany("CheckInResults")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("check_in_result_participant_id_fkey");

                    b.Navigation("CheckIn");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("HORSES.Models.CompetitionAndCheckIn", b =>
                {
                    b.HasOne("HORSES.Models.CheckIn", "CheckIn")
                        .WithMany("CompetitionAndCheckIns")
                        .HasForeignKey("CheckInId")
                        .HasConstraintName("competition_and_check_in_check_in_id_fkey");

                    b.HasOne("HORSES.Models.Competition", "Competition")
                        .WithMany("CompetitionAndCheckIns")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("competition_and_check_in_competition_id_fkey");

                    b.HasOne("HORSES.Models.Participant", "Participant")
                        .WithMany("CompetitionAndCheckIns")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("competition_and_check_in_participant_id_fkey");

                    b.HasOne("HORSES.Models.Track", "Track")
                        .WithMany("CompetitionAndCheckIns")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("competition_and_check_in_track_id_fkey");

                    b.Navigation("CheckIn");

                    b.Navigation("Competition");

                    b.Navigation("Participant");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("HORSES.Models.Donation", b =>
                {
                    b.HasOne("HORSES.Models.Horse", "Horse")
                        .WithMany("Donations")
                        .HasForeignKey("HorseId")
                        .HasConstraintName("donation_horse_id_fkey");

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("HORSES.Models.Horse", b =>
                {
                    b.HasOne("HORSES.Models.Gender", "Gender")
                        .WithMany("Horses")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("horse_gender_id_fkey");

                    b.HasOne("HORSES.Models.Owner", "Owner")
                        .WithMany("Horses")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("horse_owner_id_fkey");

                    b.HasOne("HORSES.Models.PlaceBirth", "PlaceBirth")
                        .WithMany("Horses")
                        .HasForeignKey("PlaceBirthId")
                        .HasConstraintName("horse_place_birth_id_fkey");

                    b.HasOne("HORSES.Models.TypHorse", "Typ")
                        .WithMany("Horses")
                        .HasForeignKey("TypId")
                        .HasConstraintName("horse_typ_id_fkey");

                    b.Navigation("Gender");

                    b.Navigation("Owner");

                    b.Navigation("PlaceBirth");

                    b.Navigation("Typ");
                });

            modelBuilder.Entity("HORSES.Models.Owner", b =>
                {
                    b.HasOne("HORSES.Models.Company", "Company")
                        .WithMany("Owners")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("owner_company_id_fkey");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HORSES.Models.Participant", b =>
                {
                    b.HasOne("HORSES.Models.ClothesSet", "ClothesSet")
                        .WithMany("Participants")
                        .HasForeignKey("ClothesSetId")
                        .HasConstraintName("participant_clothes_set_id_fkey");

                    b.HasOne("HORSES.Models.Horse", "Horse")
                        .WithMany("Participants")
                        .HasForeignKey("HorseId")
                        .HasConstraintName("participant_horse_id_fkey");

                    b.HasOne("HORSES.Models.UserI", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("participant_user_id_fkey");

                    b.Navigation("ClothesSet");

                    b.Navigation("Horse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HORSES.Models.UserI", b =>
                {
                    b.HasOne("HORSES.Models.Category", "Category")
                        .WithMany("UserIs")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("user_is_category_id_fkey");

                    b.HasOne("HORSES.Models.City", "City")
                        .WithMany("UserIs")
                        .HasForeignKey("CityId")
                        .HasConstraintName("user_is_city_id_fkey");

                    b.HasOne("HORSES.Models.Gender", "Gender")
                        .WithMany("UserIs")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("user_is_gender_id_fkey");

                    b.HasOne("HORSES.Models.Role", "Role")
                        .WithMany("UserIs")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_is_role_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HORSES.Models.Violation", b =>
                {
                    b.HasOne("HORSES.Models.Participant", "Participant")
                        .WithMany("Violations")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("violation_participant_id_fkey");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("HORSES.Models.Category", b =>
                {
                    b.Navigation("UserIs");
                });

            modelBuilder.Entity("HORSES.Models.CheckIn", b =>
                {
                    b.Navigation("CheckInResults");

                    b.Navigation("CompetitionAndCheckIns");
                });

            modelBuilder.Entity("HORSES.Models.City", b =>
                {
                    b.Navigation("UserIs");
                });

            modelBuilder.Entity("HORSES.Models.ClothesSet", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("HORSES.Models.Company", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("HORSES.Models.Competition", b =>
                {
                    b.Navigation("CompetitionAndCheckIns");
                });

            modelBuilder.Entity("HORSES.Models.Gender", b =>
                {
                    b.Navigation("Horses");

                    b.Navigation("UserIs");
                });

            modelBuilder.Entity("HORSES.Models.Horse", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("HORSES.Models.Owner", b =>
                {
                    b.Navigation("Horses");
                });

            modelBuilder.Entity("HORSES.Models.Participant", b =>
                {
                    b.Navigation("CheckInResults");

                    b.Navigation("CompetitionAndCheckIns");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("HORSES.Models.PlaceBirth", b =>
                {
                    b.Navigation("Horses");
                });

            modelBuilder.Entity("HORSES.Models.Role", b =>
                {
                    b.Navigation("UserIs");
                });

            modelBuilder.Entity("HORSES.Models.Track", b =>
                {
                    b.Navigation("CompetitionAndCheckIns");
                });

            modelBuilder.Entity("HORSES.Models.TypHorse", b =>
                {
                    b.Navigation("Horses");
                });

            modelBuilder.Entity("HORSES.Models.TypeCheckIn", b =>
                {
                    b.Navigation("CheckIns");
                });

            modelBuilder.Entity("HORSES.Models.UserI", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
